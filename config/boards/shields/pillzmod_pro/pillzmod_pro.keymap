#define ZMK_POINTING_DEFAULT_MOVE_VAL 1400  // default: 600
#define ZMK_POINTING_DEFAULT_SCRL_VAL 40    // default: 10

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/backlight.h>
#include <dt-bindings/zmk/pointing.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/outputs.h>

#define STRINGIFY(x) #x
#define EXPAND_AND_STRINGIFY(x) STRINGIFY(x)

#define KEYS_NONE

#define KEYS_LEFT 0  1  2  3  4  5  6 7 8 \
                  18 19 20 21 22 23 \
                  30 31 32 33 34 35 \
                  42 43 44 45 46 47 \
                  54 55 56 57 58 59 \
                  66 67 68 69 \
                  74 75 \
                  78 \
                  80 81 82 \

#define KEYS_RIGHT 9  10 11 12 13 14 15 16 17 \
                   24 25 26 27 28 29 \
                   36 37 38 39 40 41 \
                   48 49 50 51 52 53 \
                   60 61 62 63 64 65 \
                   70 71 72 73 \
                   76 77 \
                   79 \
                   83 84 85 \

#define THUMBS_LEFT 74 75 78 80 81 82

#define THUMBS_RIGHT 76 77 79 83 84 85

#define THUMBS THUMBS_LEFT THUMBS_RIGHT

#define HMT(ID, NAME, TERM, KEYS) \
    ID: mod_tap_##ID  { \
        compatible = "zmk,behavior-hold-tap"; \
        label = NAME; \
        quick_tap_ms = <0>; \
        tapping-term-ms = <TERM>; \
        flavor = "tap-preferred"; \
        #binding-cells = <2>; \
        bindings = <&kp>, <&kp>; \
        hold-trigger-key-positions = <KEYS>; \
    };

#define HMH(ID, NAME, TERM, KEYS) \
    ID: layer_tap_##ID { \
        compatible = "zmk,behavior-hold-tap"; \
        label = NAME; \
        quick_tap_ms = <0>; \
        tapping-term-ms = <TERM>; \
        flavor = "tap-preferred"; \
        #binding-cells = <2>; \
        bindings = <&mo>, <&kp>; \
        hold-trigger-key-positions = <KEYS>; \
    };

#define HML(ID, NAME, TERM, KEYS) \
    ID: layer_hold_##ID { \
        compatible = "zmk,behavior-hold-tap"; \
        label = NAME; \
        #binding-cells = <2>; \
        quick_tap_ms = <0>; \
        tapping-term-ms = <TERM>; \
        flavor = "hold-preferred"; \
        bindings = <&mo>, <&kp>; \
        hold-trigger-key-positions = <KEYS>; \
    };

&caps_word {
    continue-list = <UNDERSCORE SEMI PIPE AMPS MINUS BACKSPACE DELETE LSHFT RSHFT>;
};

/ {
    behaviors {
        HML(hmo,  "LAYER_HOLD", 200, KEYS_NONE)
        HMH(hmlr, "LAYER_TAP_LEFT", 175, KEYS_NONE)
        HMH(hmll, "LAYER_TAP_RIGHT", 175, KEYS_NONE)

        HMT(hmt, "MODS_THUMB", 175, KEYS_NONE)
        HMT(hmr, "MODS_RIGHT", 175, KEYS_LEFT THUMBS_LEFT)
        HMT(hml, "MODS_LEFT",  175, KEYS_RIGHT THUMBS_RIGHT)

        HMT(hmrs, "MODS_RIGHT_SLOW", 200, KEYS_LEFT)
        HMT(hmls, "MODS_LEFT_SLOW",  200, KEYS_RIGHT)
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            bindings = <
                &kp ESC    &kp F1     &kp F2      &kp F3       &kp F4       &kp F5  &kp F6 &kp F7 &kp F8           &kp F9 &kp F10 &kp F11 &kp F12 &kp PSCRN  &kp SLCK  &kp PAUSE_BREAK &kp C_AL_CALC &none
                &kp PSCRN  &kp N1     &kp N2      &kp N3       &kp N4       &kp N5                                                      &kp N6     &kp N7       &kp N8     &kp N9      &kp N0        &kp SLCK
                &kp CAPS   &kp Q      &kp W       &kp E        &kp R        &kp T                                                       &kp Y      &kp U        &kp I      &kp O       &kp P         &kp DEL
                &kp TAB    &kp A      &kp S       &kp D        &hml LSHFT F &kp G                                                       &kp H      &hmr RSHFT J &kp K      &kp L       &kp SEMI      &kp SQT
                &kp LSHFT  &kp Z      &kp X       &kp C        &kp V        &kp B                                                       &kp N      &kp M        &kp COMMA  &kp DOT     &kp FSLH      &kp RSHFT
                           &caps_word &kp GRAVE   &kp BSLH     &kp EQUAL                                                                           &kp MINUS    &kp LBKT   &kp RBKT    &kp DEL
                                                                              &hmt LALT TAB  &hmt LGUI CAPS &hmt RGUI DEL &hmt RALT SQT
                                                                                             &hmo 3 HOME    &hmo 2 PG_UP
                                                                    &kp SPACE &hmt LCTRL ESC &hmo 1 END     &hmo 1 PG_DN &hmt RCTRL ENTER &kp BSPC
                                                                                                &kp A  &kp B  &kp C
            >;
        };
        fun {
            bindings = <
                &none  &none  &none  &none  &none  &none  &none  &none  &none                            &none  &none  &none  &none  &none  &none  &none  &none  &none
                &kp F11 &kp F1  &kp F2   &kp F3     &kp F4    &kp F5                                             &kp F6      &kp F7       &kp F8       &kp F9       &kp F10    &kp F12
                &none  &none  &mkp MB1         &mkp MB2       &mkp MB3        &mkp MB4                           &kp HOME    &kp PG_DN    &kp PG_UP    &kp END      &kp INS    &none
                &none  &none  &mmv MOVE_LEFT   &mmv MOVE_UP   &mmv MOVE_DOWN  &mmv MOVE_RIGHT                    &kp LEFT    &kp DOWN     &kp UP       &kp RIGHT    &kp SLCK   &none
                &none  &none  &msc SCRL_LEFT   &msc SCRL_UP   &msc SCRL_DOWN  &msc SCRL_RIGHT                    &kp K_UNDO  &kp K_CUT    &kp K_COPY   &kp K_PASTE  &kp K_REDO &none
                       &none  &none            &kp C_PREV     &kp C_NEXT                                                     &kp C_VOL_DN &kp C_VOL_UP &kp C_MUTE   &none
                                                                                &trans  &trans     &trans  &trans
                                                                                        &trans     &trans
                                                                        &trans  &trans  &trans     &trans  &trans  &trans
                                                                                    &trans   &trans   &trans
            >;
        };
        mod {
            bindings = <
                &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans                             &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans
                &bt BT_CLR  &bt BT_SEL 0 &bt BT_SEL 1 &bt BT_SEL 2 &bt BT_SEL 3 &bt BT_SEL 4                        &bt BT_DISC 0 &bt BT_DISC 1  &bt BT_DISC 2 &bt BT_DISC 3 &bt BT_DISC 4 &bt BT_CLR_ALL
                &bootloader &none        &none        &none        &none        &none                               &none         &none          &none         &none         &none         &bootloader
                &none       &none        &none        &none        &none        &none                               &none         &none          &none         &none         &none         &none
                &none       &none        &none        &none        &none        &none                               &none         &none          &none         &none         &none         &none
                            &none        &none        &none        &none                                                          &none          &none         &none         &none
                                                                                &none  &none     &none  &none
                                                                                       &none     &none
                                                                         &none  &none  &none     &none  &none  &none
                                                                                    &none   &none   &none
            >;
        };
        pad {
            bindings = <
            &none  &none  &none  &none  &none  &none  &none  &none  &none                                      &none  &none  &none  &none  &none  &none  &none  &none  &none
            &none   &none   &none   &none   &none   &none                                                             &none &kp KP_NUM     &kp KP_DIVIDE   &kp KP_MULTIPLY &kp KP_EQUAL  &none
            &none   &none   &none   &none   &none   &none                                                             &none &kp KP_N7      &kp KP_N8       &kp KP_N9       &kp KP_MINUS  &none
            &none   &none   &none   &none   &none   &none                                                             &none &kp KP_N4      &kp KP_N5       &kp KP_N6       &kp KP_PLUS   &none
            &none   &none   &none   &none   &none   &none                                                             &none &kp KP_N1      &kp KP_N2       &kp KP_N3       &kp KP_ENTER  &none
                     &none   &none   &none   &none                                                                          &kp KP_EQUAL   &kp KP_NUMBER_0 &kp KP_DOT      &kp KP_ENTER
                                                                            &trans  &trans     &trans  &trans
                                                                                    &trans     &trans
                                                                    &trans  &trans  &trans     &trans  &trans  &trans
                                                                                &trans   &trans   &trans
            >;
        };
    };
};
